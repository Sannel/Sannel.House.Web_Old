using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Sannel.House.Sensor;
using Sannel.House.Web.Base;
using Sannel.House.Web.Base.Interfaces;
using Sannel.House.Web.Base.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Sannel.House.Web.Controllers.api
{
	[Route("api/v1/[controller]")]
	public partial class SensorEntryController
	{
		private IMongoContext context;
		private IDataContext sqlContext;
		private ILogger logger;

		public SensorEntryController(IMongoContext context, IDataContext sqlContext, ILogger<SensorEntryController> logger)
		{
			this.context = context;
			this.sqlContext = sqlContext;
			this.logger = logger;
		}

		private Device autoGenerateDevice(object id)
			=> new Device
		{
			DateCreated = DateTime.UtcNow,
			DisplayOrder = sqlContext.Devices.Count(),
			Name = $"Auto generated {id}",
			Description = $"Generated{id}"
		};

		[HttpPost]
		[Authorize(Roles = "SensorEntryAdd")]
		public async Task<Result<SensorEntry>> Post([FromBody]SensorEntry entry)
		{
			var result = new Result<SensorEntry>();
			if(entry == null)
			{
				result.Success = false;
				result.AddError($"{nameof(entry)} cannot be null");
				return result;
			}

			if(string.IsNullOrWhiteSpace(entry.SensorType))
			{
				result.Success = false;
				result.AddError($"SensorType cannot be null or empty");
				return result;
			}

			if(entry.DeviceMacAddress > 0)
			{
				var device = await sqlContext.Devices.AsNoTracking().FirstOrDefaultAsync(i => i.MacAddress == entry.DeviceMacAddress);
				if(device == null)
				{
					device = autoGenerateDevice(entry.DeviceMacAddress);
					device.MacAddress = entry.DeviceMacAddress;
					await sqlContext.Devices.AddAsync(device);
					await sqlContext.SaveChangesAsync();
				}
				entry.DeviceId = device.Id;
			}
			else if(entry.DeviceUuid != null)
			{
				var alt = await sqlContext.AlternateDeviceIds.AsNoTracking().FirstOrDefaultAsync(i => i.Uuid == entry.DeviceUuid);
				if(alt != null)
				{
					entry.DeviceId = alt.DeviceId;
				}
				else
				{
					var device = autoGenerateDevice(entry.DeviceUuid);
					await sqlContext.Devices.AddAsync(device);
					alt = new AlternateDeviceId
					{
						DeviceId = device.Id,
						Uuid = entry.DeviceUuid,
						DateCreated = DateTime.Now
					};
					await sqlContext.AlternateDeviceIds.AddAsync(alt);
					await sqlContext.SaveChangesAsync();
					entry.DeviceId = device.Id;
				}
			}

			if(entry.DeviceId < SystemDeviceIds.ControllerId)
			{
				entry.DeviceId = SystemDeviceIds.DefaultId;
			}

			if(entry.Id == Guid.Empty)
			{
				entry.Id = Guid.NewGuid();
			}

			await context.SensorEntries.InsertOneAsync(entry);

			result.Success = true;
			result.Data = entry;

			return result;
		}

		//[HttpGet("GetPaged")]
		//[Authorize(Roles = "SensorEntryList")]
		//public PagedResults<SensorEntry> GetPaged()
		//	=> GetPaged(1);

		//[HttpGet("GetPaged/{page}")]
		//[Authorize(Roles = "SensorEntryList")]
		//public PagedResults<SensorEntry> GetPaged(int page)
		//	=> GetPaged(page, 25);

		//[HttpGet("GetPaged/{page}/{pageSize}")]
		//[Authorize(Roles = "SensorEntryList")]
		//public PagedResults<SensorEntry> GetPaged(int page, int pageSize)
		//	=> internalGetPaged(page, pageSize);

		//[HttpGet("{id}")]
		//[Authorize(Roles = "SensorEntryList")]
		//public Result<SensorEntry> Get(Guid id)
		//	=> internalGet(id);

		//[HttpPost]
		//[Authorize(Roles = "SensorEntryAdd")]
		//public Result<SensorEntry> Post([FromBody]SensorEntry data)
		//	=> internalPost(data);

		//private Device checkMacAddress(SensorEntry data)
		//{
		//	if (data.DeviceMacAddress != null) // No device id was passed but a mac address was. look for a device with that address if none are found add one.
		//	{
		//		var device = context.Devices.FirstOrDefault(i => i.MacAddress == data.DeviceMacAddress);
		//		if (device == null && data.DeviceMacAddress > 0)
		//		{
		//			device = new Device()
		//			{
		//				Name = $"Auto device {data.DeviceMacAddress}",
		//				Description = "Auto ",
		//				DateCreated = DateTime.Now,
		//				IsReadOnly = false,
		//				MacAddress = data.DeviceMacAddress,
		//				DisplayOrder = context.Devices.Count()
		//			};

		//			context.Devices.Add(device);
		//			context.SaveChanges();
		//			data.DeviceId = device.Id;
		//		}
		//		else if(device != null)
		//		{
		//			data.DeviceId = device.Id;
		//		}

		//		return device;
		//	}

		//	return null;
		//}

		//private void checkForDeviceNull(SensorEntry data, Device device)
		//{
		//	if (device == null)
		//	{
		//		if (logger.IsEnabled(LogLevel.Error))
		//		{
		//			logger.LogError(LoggingIds.DeviceNotFoundError, $"A device with id {data.DeviceId} was not found setting device to default");
		//		}
		//		data.DeviceId = SystemDeviceIds.DefaultId;
		//	}
		//}

		//partial void postExtraReset(SensorEntry data)
		//{
		//	if (data.DeviceId > default(int))
		//	{
		//		var device = context.Devices.FirstOrDefault(i => i.Id == data.DeviceId);
		//		if (device == null)
		//		{
		//			device = checkMacAddress(data);
		//		}

		//		checkForDeviceNull(data, device);
		//	}
		//	else
		//	{
		//		var device = checkMacAddress(data);

		//		checkForDeviceNull(data, device);
		//	}
		//}
	}
}
